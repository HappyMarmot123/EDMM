// .cursorrules - Feature-Sliced Design (FSD) 적용

// --- Project Overview & Key Features ---
const projectOverview = `This project is a music streaming website where users can listen to music.`;

const keyFeatures = [
  "Music playback",
  "Search for songs, artists, albums",
  "Visual site using animations",
];

// --- Technology Stack ---
const techStack = [
  "Next.js (App Router)",
  "TypeScript",
  "Tailwind CSS",
  "Framer Motion (for animations)",
  "Zustand (for state management)",
  "Docker (for containerization)",
  "Cloudinary (for media management, e.g., album art)",
];

// --- Feature-Sliced Design (FSD) Principles ---
const fsdPrinciples = [
  "Layer Reference Rules: Strictly enforce how layers can depend on each other.",
  "Feature-Centric Code Splitting: Organize code primarily around user-facing features.",
  "Domain-Driven Management: Manage code in domain units, allowing modifications to a specific feature when business requirements change.",
  "Unidirectional Dependency Flow: Components in a layer must only reference components from layers below it (e.g., 'pages' can reference 'widgets', but not vice-versa). This aims to reduce code coupling and improve maintainability.",
];

// --- FSD Layer Structure (6 Layers) ---
const fsdLayerStructure = {
  app: "앱의 시작점으로 주요 설정 관리 - 앱 라우팅 목적으로 사용하는 것이 주 목적",
  widgets:
    "페이지 내에서 독립적으로 작동하는 큰 기능 단위 - 페이지 단위, feature 컴포넌트를 라이브러리 UI 형태로 조합하여 반환",
  features:
    "팔로우 기능과 같은 특정 동작을 정의, 재사용 가능한 비즈니스 기능을 고려하며 작업 진행 - 로직 / UI : 주 관심사 대상",
  entities: "데이터 모델 및 도메인 중심 관리",
  shared: "전반에서 재사용 가능한 유틸리티, 컴포넌트, 훅",
};

// --- FSD Directory Structure ---
// Note: Next.js App Router conventions (like app/layout.js, app/page.js for root) should be integrated within this FSD structure.
// For example, a top-level page.js might reside in app/, but specific page components would be in pages/HomePage/HomePage.tsx etc.
const folderStructure = `
app/
  ├── api/
  ├── providers/
  ├── store/

widgets/
  ├── Navbar/
  ├── Sidebar/
  ├── Footer/

features/
  ├── Auth/
  ├── Search/
  ├── Cart/

entities/
  ├── User/
  ├── Product/

shared/
  ├── components/
  ├── config/
  ├── hooks/
  ├── lib/
  ├── router/
  ├── types/
  ├── styles/
`;

// --- Next.js App Router Best Practices (to be applied within FSD context) ---
const nextjsAppRouterBestPractices = [
  "Use server components by default (can reside in any FSD layer, decision based on data needs and interactivity)",
  "Implement client components only when necessary (often in 'features', 'entities', or 'shared/components')",
  "Utilize the new file-based routing system (primarily concerns 'app/' and 'pages/' layers for route definitions)",
  "Use layout.js for shared layouts (in 'app/' for root, or within specific page/widget structures if applicable)",
  "Implement loading.js for loading states (Next.js specific, often at 'app/' or 'pages/' level)",
  "Use error.js for error handling (Next.js specific, often at 'app/' or 'pages/' level)",
  "Utilize route handlers for API routes (can be organized within 'app/api/' or a dedicated 'shared/api' if interacting with FSD layers)",
];

// --- Additional General Instructions (to be applied within FSD context) ---
const additionalInstructions = [
  "Use TypeScript for type safety (applies to all layers).",
  "Implement proper metadata for SEO (primarily in 'app/' and 'pages/' layers).",
  "Utilize Next.js Image component for optimized images (within components in any layer).",
  "Use Tailwind CSS for styling (applies to all layers).",
  "Implement proper error boundaries (can wrap components in any layer, or at 'pages'/'widgets' level).",
  "Follow Next.js naming conventions for special files (e.g., layout.js, page.js) within the 'app/' and 'pages/' FSD layers.",
  "Use environment variables for configuration (managed via 'shared/config/' or Next.js runtime env vars).",
  "When creating a file or directory, the first character must be lowercase, not uppercase (e.g., 'homePage' not 'HomePage' for a directory, but component files like 'HomePage.tsx' are fine).",
];

// --- Development Guidelines specific to FSD ---
const fsdDevelopmentGuidelines = [
  "Strictly adhere to the Unidirectional Dependency Flow: Higher layers can use lower layers, but not vice-versa. (e.g., 'features' can use 'entities' and 'shared', but 'entities' cannot use 'features').",
  "Isolate Features: Features should be self-contained and not directly depend on other features. If interaction is needed, it should be orchestrated by a higher layer (widget or page).",
  "Entities are Business Logic Dumb: Entities should represent data and basic related logic/components, but not complex feature-specific operations.",
  "Shared is Generic: Code in 'shared' must not contain any business logic or be tied to specific features/entities. It should be universally applicable.",
  "Public API for Slices: Each slice (feature, entity, widget, page) should ideally expose a public API (e.g., through an index.ts barrel file) for other layers to consume, hiding internal implementation details.",
];
